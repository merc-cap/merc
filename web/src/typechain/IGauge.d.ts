/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IGaugeInterface extends ethers.utils.Interface {
  functions: {
    "burn(uint256,uint256)": FunctionFragment;
    "burnedWeightOf(uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "depledge(uint256,uint256,address)": FunctionFragment;
    "merc()": FunctionFragment;
    "pledge(uint256,uint256,address)": FunctionFragment;
    "pledged(uint256)": FunctionFragment;
    "stake(uint256,uint256,address)": FunctionFragment;
    "staked(uint256,address)": FunctionFragment;
    "stakingToken(uint256)": FunctionFragment;
    "totalStaked(uint256)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "unstake(uint256,uint256,address)": FunctionFragment;
    "weightOf(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnedWeightOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depledge",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "merc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pledged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "weightOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledged", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weightOf", data: BytesLike): Result;

  events: {};
}

export class IGauge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IGaugeInterface;

  functions: {
    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    merc(overrides?: CallOverrides): Promise<[string]>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  burn(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnedWeightOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    gaugeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depledge(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  merc(overrides?: CallOverrides): Promise<string>;

  pledge(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pledged(uint256)"(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pledged(uint256,address)"(
    gaugeId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stake(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staked(
    gaugeId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingToken(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalStaked(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weightOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    merc(overrides?: CallOverrides): Promise<string>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    merc(overrides?: CallOverrides): Promise<BigNumber>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    merc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
