/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GaugeInterface extends ethers.utils.Interface {
  functions: {
    "BURN_WEIGHT_COEFF()": FunctionFragment;
    "REWARD_PER_GAUGE_WEIGHT_PRECISION()": FunctionFragment;
    "REWARD_PER_TOKEN_PRECISION()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256,uint256)": FunctionFragment;
    "burnedWeightOf(uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "createTime()": FunctionFragment;
    "depledge(uint256,uint256,address)": FunctionFragment;
    "earned(uint256,address)": FunctionFragment;
    "gaugeEarned(uint256)": FunctionFragment;
    "gauges(uint256)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "merc()": FunctionFragment;
    "mint(address,address)": FunctionFragment;
    "mintPrice()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pledge(uint256,uint256,address)": FunctionFragment;
    "pledged(uint256)": FunctionFragment;
    "pledgingVaultOf(uint256)": FunctionFragment;
    "recycle(uint256,address)": FunctionFragment;
    "renderer()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerGaugeWeight()": FunctionFragment;
    "rewardPerGaugeWeightStored()": FunctionFragment;
    "rewardPerToken(uint256)": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setRenderer(address)": FunctionFragment;
    "stake(uint256,uint256,address)": FunctionFragment;
    "staked(uint256,address)": FunctionFragment;
    "stakingToken(uint256)": FunctionFragment;
    "stakingVaultOf(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenCount()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalStaked(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256,uint256,address)": FunctionFragment;
    "weightOf(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BURN_WEIGHT_COEFF",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_GAUGE_WEIGHT_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_PER_TOKEN_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnedWeightOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depledge",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeEarned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gauges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "merc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "mintPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledge",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pledged",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pledgingVaultOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recycle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "renderer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerGaugeWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerGaugeWeightStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setRenderer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "staked",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingVaultOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "weightOf",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BURN_WEIGHT_COEFF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_GAUGE_WEIGHT_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_PER_TOKEN_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugeEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pledged", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pledgingVaultOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "recycle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renderer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerGaugeWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerGaugeWeightStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenderer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingVaultOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weightOf", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Burn(uint256,address,uint256)": EventFragment;
    "Depledge(uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pledge(uint256,address,uint256)": EventFragment;
    "RewardPaid(uint256,address,uint256)": EventFragment;
    "Stake(uint256,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstake(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Depledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pledge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type BurnEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type DepledgeEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PledgeEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type RewardPaidEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type StakeEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export type UnstakeEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    gaugeId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export class Gauge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GaugeInterface;

  functions: {
    BURN_WEIGHT_COEFF(overrides?: CallOverrides): Promise<[number]>;

    REWARD_PER_GAUGE_WEIGHT_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REWARD_PER_TOKEN_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gaugeEarned(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gauges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingToken: string;
        stakingVault: string;
        pledgingVault: string;
        totalStaked: BigNumber;
        totalRewarded: BigNumber;
        weight: BigNumber;
        totalPledged: BigNumber;
        rewardPerWeightPaid: BigNumber;
        rewards: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    merc(overrides?: CallOverrides): Promise<[string]>;

    mint(
      to: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pledgingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recycle(
      gaugeId: BigNumberish,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renderer(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerGaugeWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerGaugeWeightStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BURN_WEIGHT_COEFF(overrides?: CallOverrides): Promise<number>;

  REWARD_PER_GAUGE_WEIGHT_PRECISION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  REWARD_PER_TOKEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnedWeightOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    gaugeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createTime(overrides?: CallOverrides): Promise<BigNumber>;

  depledge(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(
    gaugeId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gaugeEarned(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gauges(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      stakingToken: string;
      stakingVault: string;
      pledgingVault: string;
      totalStaked: BigNumber;
      totalRewarded: BigNumber;
      weight: BigNumber;
      totalPledged: BigNumber;
      rewardPerWeightPaid: BigNumber;
      rewards: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  merc(overrides?: CallOverrides): Promise<string>;

  mint(
    to: string,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  pledge(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pledged(uint256)"(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pledged(uint256,address)"(
    gaugeId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pledgingVaultOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  recycle(
    gaugeId: BigNumberish,
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renderer(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerGaugeWeight(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerGaugeWeightStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerToken(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRenderer(
    _renderer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staked(
    gaugeId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakingToken(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stakingVaultOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(gaugeId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalStaked(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    gaugeId: BigNumberish,
    amount: BigNumberish,
    who: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weightOf(
    gaugeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BURN_WEIGHT_COEFF(overrides?: CallOverrides): Promise<number>;

    REWARD_PER_GAUGE_WEIGHT_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_TOKEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    earned(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gaugeEarned(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingToken: string;
        stakingVault: string;
        pledgingVault: string;
        totalStaked: BigNumber;
        totalRewarded: BigNumber;
        weight: BigNumber;
        totalPledged: BigNumber;
        rewardPerWeightPaid: BigNumber;
        rewards: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    merc(overrides?: CallOverrides): Promise<string>;

    mint(
      to: string,
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledgingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    recycle(
      gaugeId: BigNumberish,
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renderer(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerGaugeWeight(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerGaugeWeightStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRenderer(_renderer: string, overrides?: CallOverrides): Promise<void>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(gaugeId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: CallOverrides
    ): Promise<void>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "Burn(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    Burn(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    "Depledge(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    Depledge(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Pledge(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    Pledge(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    "RewardPaid(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    RewardPaid(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    "Stake(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    Stake(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    "Unstake(uint256,address,uint256)"(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;

    Unstake(
      gaugeId?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { gaugeId: BigNumber; account: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    BURN_WEIGHT_COEFF(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_PER_GAUGE_WEIGHT_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REWARD_PER_TOKEN_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gaugeEarned(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gauges(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    merc(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintPrice(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pledgingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recycle(
      gaugeId: BigNumberish,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renderer(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerGaugeWeight(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerGaugeWeightStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BURN_WEIGHT_COEFF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_PER_GAUGE_WEIGHT_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_PER_TOKEN_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnedWeightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      gaugeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gaugeEarned(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gauges(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    merc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledge(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pledged(uint256)"(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pledged(uint256,address)"(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pledgingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recycle(
      gaugeId: BigNumberish,
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerGaugeWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerGaugeWeightStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRenderer(
      _renderer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staked(
      gaugeId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingToken(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingVaultOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      gaugeId: BigNumberish,
      amount: BigNumberish,
      who: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weightOf(
      gaugeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
